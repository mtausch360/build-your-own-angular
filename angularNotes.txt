*the double dollar prefix - $$ signifies that this variable should be considered private to the angular framework

Scopes

  provide observers to watch for model cahnges

  provide the ability to propogate model changes through the application as well as outside the system to other components

  Can be nested such that they can isolate functionality and model properties

  provide an execution environment in which expressions are evaluated

  share data between controllers and views

  boradcasting and listening for events

  watching for changes in data via dirty-checking mechanism

  methods:

    $watch

      you can attach a watcher to a scope

      a watcher is something that is notified when a change occurs in the scope

      To create a watcher provide two functions to $watch

      1. watch function - specifies the piece of data you're interested in. Should be idempotent, meaning no side effects

      2. listener function - which will be called whenever specified data changes

      *3. boolean - optional compare by value flag

    $digest - initates digest cycle

      iterates over all watchers that have been attached on the scope and runs their watch/listener functions accordingly


    $eval

      takes a function and an optional argument. returns the result of that function which was passed in the scope itself and the optional argument

    $apply

      takes a function/expression as an argument. executes function using $eval and then invokes $digest

    $applyAsync

      evaluates expression and schedules digest asynchronously 

    $evalAsync
    
      takes a function and schedules it to run later but still during the ongoing digest
      guaranteed to run before the browser decides to do anything else (within current digest cycle)

  Internal values:

    $$watchers - array - of watchers which contain watcherFn and listenerFn and also the last property which refers to the last value fo the value returned by the watch function. Used in digest cycle

    $$digestOnce - function -  which iterates over watchers one time. returns boolean representing whether or not the cycle was dirty

    $$lastDirtyWatch - watcher or null - keeps track of last dirty watcher in $digest cycle to short circuit digest cycle

    $$areEqual - compares new and previous values of values to watch

    $$asyncQueue - queue of expressions to evaluate. consists of scope and expression to be evaluated

    $$phase - string attribute which stores information about what's currently going on


Questions:

What is an Angular expression and why are they useful?


currentPageNumber: 44
